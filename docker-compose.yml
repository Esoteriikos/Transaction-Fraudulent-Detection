version: '3.8'

services:
  # Kafka and Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - anomaly-detection-network

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      # KAFKA_PROCESS_ROLES: 'broker'
      # KAFKA_CONTROLLER_LISTENER_NAMES: 'PLAINTEXT'
    networks:
      - anomaly-detection-network

  # Redis for feature storage
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - anomaly-detection-network

  # Data Producer
  data-producer:
    build:
      context: ./producer
    depends_on:
      - kafka
    environment:
      KAFKA_BROKER: kafka:29092
    networks:
      - anomaly-detection-network

  # Anomaly Detection API
  anomaly-detection-api:
    build:
      context: ./api
    ports:
      - "8000:8000"
    depends_on:
      - kafka
      - redis
      - mlflow
    environment:
      KAFKA_BROKER: kafka:29092
      REDIS_HOST: redis
      REDIS_PORT: 6379
      MLFLOW_TRACKING_URI: http://mlflow:5000
    networks:
      - anomaly-detection-network

  # MySQL for MLflow backend store
  mlflow-db:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: mlflow_root_password
      MYSQL_DATABASE: mlflow
      MYSQL_USER: mlflow_user
      MYSQL_PASSWORD: mlflow_password
    ports:
      - "3306:3306"
    volumes:
      - mlflow-db-data:/var/lib/mysql
    networks:
      - anomaly-detection-network

  # MLflow for model tracking
  mlflow:
    build:
      context: ./mlflow
    ports:
      - "5000:5000"
    volumes:
      - ./mlruns:/mlruns
    depends_on:
      - mlflow-db
    environment:
      # Use MySQL as backend store
      MLFLOW_BACKEND_STORE_URI: mysql+pymysql://mlflow_user:mlflow_password@mlflow-db:3306/mlflow
      # Use file-based artifact store
      MLFLOW_ARTIFACT_ROOT: /mlruns
      # Set default artifact root for MLflow server
      MLFLOW_SERVER_DEFAULT_ARTIFACT_ROOT: file:/mlruns
    command: >
      mlflow server
      --backend-store-uri mysql+pymysql://mlflow_user:mlflow_password@mlflow-db:3306/mlflow
      --default-artifact-root file:/mlruns
      --host 0.0.0.0
      --port 5000
    networks:
      - anomaly-detection-network

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - anomaly-detection-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning/dashboards:/var/lib/grafana/dashboards # TODO: Replace './your_grafana_dashboards_directory/' with the actual relative path to your Grafana dashboard JSON files
    depends_on:
      - prometheus
    networks:
      - anomaly-detection-network

networks:
  anomaly-detection-network:
    driver: bridge

volumes:
  grafana-data:
  mlflow-db-data: